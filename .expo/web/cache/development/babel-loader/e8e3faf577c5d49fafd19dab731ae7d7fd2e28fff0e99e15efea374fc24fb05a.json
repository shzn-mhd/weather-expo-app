{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, _data$current$tempera, _data$current, _data$current$humidit, _data$current2, _data$current$weather, _data$current3, _data$current3$weathe, _data$current$weather2, _data$current4, _data$current4$weathe, _data$current$wind_sp, _data$current5, locationResponse, _locationResponse$dat, latitude, longitude, city, country, date, hours, weatherUrl, weatherResponse, data, temperature, humidity, weatherIcon, weatherDescription, windSpeed, result;\n  return _regeneratorRuntime.async(function getConsultApi$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        axios = require('axios');\n        _context.prev = 1;\n        _context.next = 4;\n        return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n      case 4:\n        locationResponse = _context.sent;\n        console.log(\"Location data:\", locationResponse.data);\n        _locationResponse$dat = locationResponse.data, latitude = _locationResponse$dat.latitude, longitude = _locationResponse$dat.longitude, city = _locationResponse$dat.city, country = _locationResponse$dat.country_code;\n        if (!(!latitude || !longitude)) {\n          _context.next = 9;\n          break;\n        }\n        throw new Error(\"Invalid latitude or longitude retrieved from geolocation API.\");\n      case 9:\n        date = new Date();\n        hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n        weatherUrl = \"http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=\" + latitude + \",\" + longitude;\n        _context.next = 14;\n        return _regeneratorRuntime.awrap(axios.get(weatherUrl));\n      case 14:\n        weatherResponse = _context.sent;\n        data = weatherResponse.data;\n        console.log(\"Weather data:\", data);\n        temperature = (_data$current$tempera = (_data$current = data.current) == null ? void 0 : _data$current.temperature) != null ? _data$current$tempera : \"N/A\";\n        humidity = (_data$current$humidit = (_data$current2 = data.current) == null ? void 0 : _data$current2.humidity) != null ? _data$current$humidit : \"N/A\";\n        weatherIcon = (_data$current$weather = (_data$current3 = data.current) == null ? void 0 : (_data$current3$weathe = _data$current3.weather_icons) == null ? void 0 : _data$current3$weathe[0]) != null ? _data$current$weather : \"\";\n        weatherDescription = (_data$current$weather2 = (_data$current4 = data.current) == null ? void 0 : (_data$current4$weathe = _data$current4.weather_descriptions) == null ? void 0 : _data$current4$weathe[0]) != null ? _data$current$weather2 : \"No description available\";\n        windSpeed = (_data$current$wind_sp = (_data$current5 = data.current) == null ? void 0 : _data$current5.wind_speed) != null ? _data$current$wind_sp : \"N/A\";\n        result = {\n          country: country != null ? country : \"Unknown\",\n          city: city != null ? city : \"Unknown\",\n          hours: hours,\n          temperature: temperature,\n          humidity: humidity,\n          weatherIcon: weatherIcon,\n          weatherDescription: weatherDescription,\n          windSpeed: windSpeed\n        };\n        console.log(\"Result:\", result);\n        return _context.abrupt(\"return\", result);\n      case 27:\n        _context.prev = 27;\n        _context.t0 = _context[\"catch\"](1);\n        console.error(\"Error fetching weather data:\", _context.t0.message);\n        return _context.abrupt(\"return\", null);\n      case 31:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[1, 27]], Promise);\n}","map":{"version":3,"names":["getConsultApi","axios","_data$current$tempera","_data$current","_data$current$humidit","_data$current2","_data$current$weather","_data$current3","_data$current3$weathe","_data$current$weather2","_data$current4","_data$current4$weathe","_data$current$wind_sp","_data$current5","locationResponse","_locationResponse$dat","latitude","longitude","city","country","date","hours","weatherUrl","weatherResponse","data","temperature","humidity","weatherIcon","weatherDescription","windSpeed","result","_regeneratorRuntime","async","getConsultApi$","_context","prev","next","require","awrap","get","sent","console","log","country_code","Error","Date","getHours","String","getMinutes","padStart","current","weather_icons","weather_descriptions","wind_speed","abrupt","t0","error","message","stop","Promise"],"sources":["C:/Users/user/Desktop/Kishor/weather-react-native-main/api/ConsultApi.js"],"sourcesContent":["// export default async function getConsultApi() {\n\n//     const axios = require('axios');\n\n//     const Location = await axios.get('https://geolocation-db.com/json/')\n\n//     let date = new Date()\n//     const Hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n\n//     var result = []\n\n//     const latitude = await Location.data.latitude\n//     const longitude = await Location.data.longitude\n\n//     // await axios.get(`https://api.weatherapi.com/v1/forecast.json?key=d194e0f579aff2691e35ce8b7de17092&q=${latitude},${longitude}&days=1&api=yes`)\n//     await axios.get(`http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=${latitude},${longitude}`)\n//         .then(async (res) => {\n//             const data = await res.data\n//             const ConditionCode = data.current.condition.icon\n\n//             let manha = (data.forecast.forecastday[0].hour[6].temp_c\n//                 + data.forecast.forecastday[0].hour[7].temp_c\n//                 + data.forecast.forecastday[0].hour[8].temp_c\n//                 + data.forecast.forecastday[0].hour[9].temp_c\n//                 + data.forecast.forecastday[0].hour[10].temp_c\n//                 + data.forecast.forecastday[0].hour[11].temp_c\n//                 + data.forecast.forecastday[0].hour[12].temp_c)\n//                 / 7\n\n//             let tarde = await (data.forecast.forecastday[0].hour[12].temp_c\n//                 + data.forecast.forecastday[0].hour[13].temp_c\n//                 + data.forecast.forecastday[0].hour[14].temp_c\n//                 + data.forecast.forecastday[0].hour[15].temp_c\n//                 + data.forecast.forecastday[0].hour[16].temp_c\n//                 + data.forecast.forecastday[0].hour[17].temp_c\n//                 + data.forecast.forecastday[0].hour[18].temp_c)\n//                 / 7\n\n//             let noite = (data.forecast.forecastday[0].hour[19].temp_c\n//                 + data.forecast.forecastday[0].hour[19].temp_c\n//                 + data.forecast.forecastday[0].hour[20].temp_c\n//                 + data.forecast.forecastday[0].hour[21].temp_c\n//                 + data.forecast.forecastday[0].hour[22].temp_c\n//                 + data.forecast.forecastday[0].hour[23].temp_c\n//                 + data.forecast.forecastday[0].hour[0].temp_c)\n//                 / 7;\n\n//             const City = Location.data.city\n//             const Country = Location.data.country_code\n//             const Temperature = res.data.current.temp_c\n//             const TemperatureMorning = Math.floor(manha)\n//             const TemperatureEvening = Math.floor(tarde)\n//             const TemperatureNight = Math.floor(noite)\n//             const TemperatureMin = data.forecast.forecastday[0].day.mintemp_c\n//             const TemperatureMax = data.forecast.forecastday[0].day.maxtemp_c\n//             const Rain = data.forecast.forecastday[0].day.daily_chance_of_rain\n//             const Humidity = data.current.humidity\n//             const WeatherIcon = ConditionCode\n\n//             // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Wind\n//             result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Humidity, WeatherIcon]\n//         })\n\n//     return result\n// }\n\n// export default async function getConsultApi() {\n//     const axios = require('axios');\n\n//     try {\n//         // Fetch location data\n//         const locationResponse = await axios.get('https://geolocation-db.com/json/');\n//         const { latitude, longitude, city, country_code: country } = locationResponse.data;\n\n//         // Get current date and time\n//         const date = new Date();\n//         const hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n\n//         // Fetch weather data from WeatherStack\n//         const weatherUrl = `http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=${latitude},${longitude}`;\n//         const weatherResponse = await axios.get(weatherUrl);\n//         const data = weatherResponse.data;\n\n//         // Extract current weather details\n//         const temperature = data.current.temperature; // Current temperature\n//         const humidity = data.current.humidity; // Humidity\n//         const weatherIcon = data.current.weather_icons[0]; // Icon URL\n//         const weatherDescription = data.current.weather_descriptions[0]; // Weather condition\n//         const windSpeed = data.current.wind_speed; // Wind speed in km/h\n\n//         // Prepare result\n//         const result = {\n//             country,\n//             city,\n//             hours,\n//             temperature,\n//             humidity,\n//             weatherIcon,\n//             weatherDescription,\n//             windSpeed,\n//         };\n\n//         return result;\n//     } catch (error) {\n//         console.error(\"Error fetching weather data:\", error.message);\n//         return null;\n//     }\n// }\n\nexport default async function getConsultApi() {\n    const axios = require('axios');\n\n    try {\n        // Fetch location data\n        const locationResponse = await axios.get('https://geolocation-db.com/json/');\n        console.log(\"Location data:\", locationResponse.data);\n\n        const { latitude, longitude, city, country_code: country } = locationResponse.data;\n\n        if (!latitude || !longitude) {\n            throw new Error(\"Invalid latitude or longitude retrieved from geolocation API.\");\n        }\n\n        // Get current date and time\n        const date = new Date();\n        const hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n\n        // Fetch weather data from WeatherStack\n        const weatherUrl = `http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=${latitude},${longitude}`;\n        const weatherResponse = await axios.get(weatherUrl);\n        const data = weatherResponse.data;\n\n        console.log(\"Weather data:\", data);\n\n        // Extract current weather details with fallbacks\n        const temperature = data.current?.temperature ?? \"N/A\"; // Current temperature\n        const humidity = data.current?.humidity ?? \"N/A\"; // Humidity\n        const weatherIcon = data.current?.weather_icons?.[0] ?? \"\"; // Icon URL\n        const weatherDescription = data.current?.weather_descriptions?.[0] ?? \"No description available\"; // Weather condition\n        const windSpeed = data.current?.wind_speed ?? \"N/A\"; // Wind speed in km/h\n\n        // Prepare result\n        const result = {\n            country: country ?? \"Unknown\",\n            city: city ?? \"Unknown\",\n            hours,\n            temperature,\n            humidity,\n            weatherIcon,\n            weatherDescription,\n            windSpeed,\n        };\n\n        console.log(\"Result:\", result); // Final result to verify\n\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching weather data:\", error.message);\n        return null;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}