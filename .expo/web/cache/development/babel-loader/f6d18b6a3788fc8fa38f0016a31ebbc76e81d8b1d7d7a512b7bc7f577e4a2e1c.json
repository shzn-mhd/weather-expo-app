{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, locationResponse, _locationResponse$dat, latitude, longitude, city, country, date, hours, weatherUrl, weatherResponse, data, temperature, humidity, weatherIcon, weatherDescription, windSpeed, result;\n  return _regeneratorRuntime.async(function getConsultApi$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        axios = require('axios');\n        _context.prev = 1;\n        _context.next = 4;\n        return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n      case 4:\n        locationResponse = _context.sent;\n        _locationResponse$dat = locationResponse.data, latitude = _locationResponse$dat.latitude, longitude = _locationResponse$dat.longitude, city = _locationResponse$dat.city, country = _locationResponse$dat.country_code;\n        date = new Date();\n        hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n        weatherUrl = \"http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=\" + latitude + \",\" + longitude;\n        _context.next = 11;\n        return _regeneratorRuntime.awrap(axios.get(weatherUrl));\n      case 11:\n        weatherResponse = _context.sent;\n        data = weatherResponse.data;\n        temperature = data.current.temperature;\n        humidity = data.current.humidity;\n        weatherIcon = data.current.weather_icons[0];\n        weatherDescription = data.current.weather_descriptions[0];\n        windSpeed = data.current.wind_speed;\n        result = {\n          country: country,\n          city: city,\n          hours: hours,\n          temperature: temperature,\n          humidity: humidity,\n          weatherIcon: weatherIcon,\n          weatherDescription: weatherDescription,\n          windSpeed: windSpeed\n        };\n        return _context.abrupt(\"return\", result);\n      case 22:\n        _context.prev = 22;\n        _context.t0 = _context[\"catch\"](1);\n        console.error(\"Error fetching weather data:\", _context.t0.message);\n        return _context.abrupt(\"return\", null);\n      case 26:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[1, 22]], Promise);\n}","map":{"version":3,"names":["getConsultApi","axios","locationResponse","_locationResponse$dat","latitude","longitude","city","country","date","hours","weatherUrl","weatherResponse","data","temperature","humidity","weatherIcon","weatherDescription","windSpeed","result","_regeneratorRuntime","async","getConsultApi$","_context","prev","next","require","awrap","get","sent","country_code","Date","getHours","String","getMinutes","padStart","current","weather_icons","weather_descriptions","wind_speed","abrupt","t0","console","error","message","stop","Promise"],"sources":["C:/Users/user/Desktop/Kishor/weather-react-native-main/api/ConsultApi.js"],"sourcesContent":["// export default async function getConsultApi() {\n\n//     const axios = require('axios');\n\n//     const Location = await axios.get('https://geolocation-db.com/json/')\n\n//     let date = new Date()\n//     const Hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n\n//     var result = []\n\n//     const latitude = await Location.data.latitude\n//     const longitude = await Location.data.longitude\n\n//     // await axios.get(`https://api.weatherapi.com/v1/forecast.json?key=d194e0f579aff2691e35ce8b7de17092&q=${latitude},${longitude}&days=1&api=yes`)\n//     await axios.get(`http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=${latitude},${longitude}`)\n//         .then(async (res) => {\n//             const data = await res.data\n//             const ConditionCode = data.current.condition.icon\n\n//             let manha = (data.forecast.forecastday[0].hour[6].temp_c\n//                 + data.forecast.forecastday[0].hour[7].temp_c\n//                 + data.forecast.forecastday[0].hour[8].temp_c\n//                 + data.forecast.forecastday[0].hour[9].temp_c\n//                 + data.forecast.forecastday[0].hour[10].temp_c\n//                 + data.forecast.forecastday[0].hour[11].temp_c\n//                 + data.forecast.forecastday[0].hour[12].temp_c)\n//                 / 7\n\n//             let tarde = await (data.forecast.forecastday[0].hour[12].temp_c\n//                 + data.forecast.forecastday[0].hour[13].temp_c\n//                 + data.forecast.forecastday[0].hour[14].temp_c\n//                 + data.forecast.forecastday[0].hour[15].temp_c\n//                 + data.forecast.forecastday[0].hour[16].temp_c\n//                 + data.forecast.forecastday[0].hour[17].temp_c\n//                 + data.forecast.forecastday[0].hour[18].temp_c)\n//                 / 7\n\n//             let noite = (data.forecast.forecastday[0].hour[19].temp_c\n//                 + data.forecast.forecastday[0].hour[19].temp_c\n//                 + data.forecast.forecastday[0].hour[20].temp_c\n//                 + data.forecast.forecastday[0].hour[21].temp_c\n//                 + data.forecast.forecastday[0].hour[22].temp_c\n//                 + data.forecast.forecastday[0].hour[23].temp_c\n//                 + data.forecast.forecastday[0].hour[0].temp_c)\n//                 / 7;\n\n//             const City = Location.data.city\n//             const Country = Location.data.country_code\n//             const Temperature = res.data.current.temp_c\n//             const TemperatureMorning = Math.floor(manha)\n//             const TemperatureEvening = Math.floor(tarde)\n//             const TemperatureNight = Math.floor(noite)\n//             const TemperatureMin = data.forecast.forecastday[0].day.mintemp_c\n//             const TemperatureMax = data.forecast.forecastday[0].day.maxtemp_c\n//             const Rain = data.forecast.forecastday[0].day.daily_chance_of_rain\n//             const Humidity = data.current.humidity\n//             const WeatherIcon = ConditionCode\n\n//             // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Wind\n//             result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Humidity, WeatherIcon]\n//         })\n\n//     return result\n// }\n\nexport default async function getConsultApi() {\n    const axios = require('axios');\n\n    try {\n        // Fetch location data\n        const locationResponse = await axios.get('https://geolocation-db.com/json/');\n        const { latitude, longitude, city, country_code: country } = locationResponse.data;\n\n        // Get current date and time\n        const date = new Date();\n        const hours = date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');\n\n        // Fetch weather data from WeatherStack\n        const weatherUrl = `http://api.weatherstack.com/current?access_key=d194e0f579aff2691e35ce8b7de17092&query=${latitude},${longitude}`;\n        const weatherResponse = await axios.get(weatherUrl);\n        const data = weatherResponse.data;\n\n        // Extract current weather details\n        const temperature = data.current.temperature; // Current temperature\n        const humidity = data.current.humidity; // Humidity\n        const weatherIcon = data.current.weather_icons[0]; // Icon URL\n        const weatherDescription = data.current.weather_descriptions[0]; // Weather condition\n        const windSpeed = data.current.wind_speed; // Wind speed in km/h\n\n        // Prepare result\n        const result = {\n            country,\n            city,\n            hours,\n            temperature,\n            humidity,\n            weatherIcon,\n            weatherDescription,\n            windSpeed,\n        };\n\n        return result;\n    } catch (error) {\n        console.error(\"Error fetching weather data:\", error.message);\n        return null;\n    }\n}\n\n"],"mappings":";AAkEA,eAAe,SAAeA,aAAaA,CAAA;EAAA,IAAAC,KAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,IAAA,EAAAC,KAAA,EAAAC,UAAA,EAAAC,eAAA,EAAAC,IAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,WAAA,EAAAC,kBAAA,EAAAC,SAAA,EAAAC,MAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,eAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QACjCvB,KAAK,GAAGwB,OAAO,CAAC,OAAO,CAAC;QAAAH,QAAA,CAAAC,IAAA;QAAAD,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAO,KAAA,CAIKzB,KAAK,CAAC0B,GAAG,CAAC,kCAAkC,CAAC;MAAA;QAAtEzB,gBAAgB,GAAAoB,QAAA,CAAAM,IAAA;QAAAzB,qBAAA,GACuCD,gBAAgB,CAACU,IAAI,EAA1ER,QAAQ,GAAAD,qBAAA,CAARC,QAAQ,EAAEC,SAAS,GAAAF,qBAAA,CAATE,SAAS,EAAEC,IAAI,GAAAH,qBAAA,CAAJG,IAAI,EAAgBC,OAAO,GAAAJ,qBAAA,CAArB0B,YAAY;QAGzCrB,IAAI,GAAG,IAAIsB,IAAI,CAAC,CAAC;QACjBrB,KAAK,GAAGD,IAAI,CAACuB,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAGC,MAAM,CAACxB,IAAI,CAACyB,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;QAG1ExB,UAAU,8FAA4FN,QAAQ,SAAIC,SAAS;QAAAiB,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAO,KAAA,CACnGzB,KAAK,CAAC0B,GAAG,CAACjB,UAAU,CAAC;MAAA;QAA7CC,eAAe,GAAAW,QAAA,CAAAM,IAAA;QACfhB,IAAI,GAAGD,eAAe,CAACC,IAAI;QAG3BC,WAAW,GAAGD,IAAI,CAACuB,OAAO,CAACtB,WAAW;QACtCC,QAAQ,GAAGF,IAAI,CAACuB,OAAO,CAACrB,QAAQ;QAChCC,WAAW,GAAGH,IAAI,CAACuB,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;QAC3CpB,kBAAkB,GAAGJ,IAAI,CAACuB,OAAO,CAACE,oBAAoB,CAAC,CAAC,CAAC;QACzDpB,SAAS,GAAGL,IAAI,CAACuB,OAAO,CAACG,UAAU;QAGnCpB,MAAM,GAAG;UACXX,OAAO,EAAPA,OAAO;UACPD,IAAI,EAAJA,IAAI;UACJG,KAAK,EAALA,KAAK;UACLI,WAAW,EAAXA,WAAW;UACXC,QAAQ,EAARA,QAAQ;UACRC,WAAW,EAAXA,WAAW;UACXC,kBAAkB,EAAlBA,kBAAkB;UAClBC,SAAS,EAATA;QACJ,CAAC;QAAA,OAAAK,QAAA,CAAAiB,MAAA,WAEMrB,MAAM;MAAA;QAAAI,QAAA,CAAAC,IAAA;QAAAD,QAAA,CAAAkB,EAAA,GAAAlB,QAAA;QAEbmB,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEpB,QAAA,CAAAkB,EAAA,CAAMG,OAAO,CAAC;QAAC,OAAArB,QAAA,CAAAiB,MAAA,WACtD,IAAI;MAAA;MAAA;QAAA,OAAAjB,QAAA,CAAAsB,IAAA;IAAA;EAAA,0BAAAC,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}